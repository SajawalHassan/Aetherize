generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          String @id @default(uuid())
  clerkUserId String @unique

  displayName String
  email       String @db.Text
  imageUrl    String @db.Text

  WorkspacesCreated Workspace[] @relation("workspacesCreated")
  WorkspacesAddedIn Workspace[] @relation("workspacesAddedIn")

  ProjectsCreated Project[] @relation("projectsCreated")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Component {
  id String @id @default(uuid())

  name String
  data String @db.Text

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Workspace {
  id String @id @default(uuid())

  name   String
  images String[]
  texts  String[]

  Components Component[]
  Projects   Project[]

  Owner   Profile @relation("workspacesCreated", fields: [OwnerId], references: [id], onDelete: Cascade)
  OwnerId String

  Users Profile[] @relation("workspacesAddedIn")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id String @id @default(uuid())

  name        String
  visits      Int
  domain      String  @unique
  isPublished Boolean

  Pages ProjectPage[]

  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  Owner   Profile @relation("projectsCreated", fields: [ownerId], references: [id])
  ownerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectPage {
  id String @id @default(uuid())

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
