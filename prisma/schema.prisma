generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserTier {
  FREE
  STARTER
  PRO
}

enum AetherRole {
  OWNER
  ADMIN
  CONTRIBUTER
}

enum AethenRole {
  OWNER
  ADMIN
  DEV
  TESTER
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  tier          UserTier   @default(FREE)
  aetherRole    AetherRole @default(OWNER)
  aethenRole    AethenRole @default(OWNER)
  accounts      Account[]

  workspace   Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String?
  Realm       Realm?     @relation(fields: [realmId], references: [id])
  realmId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Workspace {
  id      String   @id @default(cuid())
  realms  Realm[]
  aethers User[]
  images  String[]
  videos  String[]
  texts   String[]

  workspace   Workspace?  @relation("versionControl", fields: [workspaceId], references: [id])
  workspaceId String?
  prevStates  Workspace[] @relation("versionControl")
}

model Realm {
  id          String      @id @default(cuid())
  realmPages  RealmPage[]
  domain      String      @unique
  name        String
  visits      Int
  isPublished Boolean
  workspaceId String
  workspace   Workspace   @relation(fields: [workspaceId], references: [id])
  aethens     User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model RealmPage {
  id          String @id @default(cuid())
  content     String @db.Text
  visits      Int
  pagePath    String
  name        String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Realm   Realm  @relation(fields: [realmId], references: [id])
  realmId String
}
